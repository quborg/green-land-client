{"version":3,"file":"index.es.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/index.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport cssClasses from \"./style.css\";\n\nclass ClientCaptcha extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.captchaCode = \"\";\n  }\n\n  componentDidMount() {\n    this.generateCaptcha();\n  }\n\n  generateCode = () => {\n    const { chars, charsCount } = this.props;\n    const captcha = [];\n    for (let i = 0; i < charsCount; i += 1) {\n      const index = Math.ceil(Math.random() * chars.length);\n      if (chars[index] && captcha.indexOf(chars[index]) === -1)\n        captcha.push(chars[index]);\n      else i -= 1;\n    }\n    return captcha.join(\"\");\n  };\n\n  resetCaptcha = e => {\n    e.preventDefault();\n    this.generateCaptcha();\n  }\n\n  generateCaptcha = () => {\n    const {\n      width,\n      height,\n      fontSize,\n      captchaCode,\n      backgroundColor,\n      fontFamily,\n      fontColor\n    } = this.props;\n    this.captchaCode = this.generateCode();\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, width, height);\n    ctx.font = `${fontSize}px ${fontFamily}`;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillStyle = fontColor;\n    ctx.fillText(this.captchaCode.split(\"\").join(\" \"), width / 2, height / 2);\n    captchaCode(this.captchaCode);\n  };\n\n  render() {\n    const {\n      width,\n      height,\n      retryIcon,\n      containerClassName,\n      captchaClassName,\n      retryButtonClassName,\n      retryImgClassName,\n      retry,\n      retryIconSize\n    } = this.props;\n    return (\n      <div className={containerClassName}>\n        <canvas\n          width={width}\n          height={height}\n          ref={this.canvasRef}\n          style={{ pointerEvents: \"none\" }}\n          className={captchaClassName}\n        />\n        {retry && (\n          <button\n            onClick={this.resetCaptcha}\n            id=\"retryButton\"\n            className={retryButtonClassName}\n          >\n            <img\n              src={retryIcon}\n              alt=\"Re-new captcha\"\n              className={retryImgClassName}\n              width={retryIconSize}\n              height={retryIconSize}\n            />\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\nClientCaptcha.defaultProps = {\n  width: 100,\n  height: 40,\n  fontSize: 22,\n  fontFamily: \"Arial, Tahoma\",\n  fontColor: \"#000\",\n  chars: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\n  charsCount: 4,\n  backgroundColor: \"#F2F2F2\",\n  retry: true,\n  retryIcon: \"https://cdn.jsdelivr.net/npm/react-client-captcha/dist/retry.svg\",\n  retryIconSize: 24,\n  retryButtonClassName: cssClasses.retryButton,\n  retryImgClassName: \"\",\n  containerClassName: cssClasses.captchaContainer,\n  captchaClassName: \"\"\n};\n\nClientCaptcha.propTypes = {\n  /**\n   * width of captcha image.\n   */\n  width: PropTypes.number.isRequired,\n  /**\n   * height of captcha image.\n   */\n  height: PropTypes.number.isRequired,\n  /**\n   * fontSize of captcha characters.\n   */\n  fontSize: PropTypes.number,\n  /**\n   * fontFamily of captcha characters.\n   */\n  fontFamily: PropTypes.string,\n  /**\n   * fontColor of captcha characters.\n   */\n  fontColor: PropTypes.string,\n  /**\n   * characters that captcha should be made with.\n   */\n  chars: PropTypes.string,\n  /**\n   * count of characters that captcha should be made with.\n   */\n  charsCount: PropTypes.number,\n  /**\n   * function that returns current shown captcha code.\n   */\n  captchaCode: PropTypes.func.isRequired,\n  /**\n   * backgroundColor of captcha image.\n   */\n  backgroundColor: PropTypes.string,\n  /**\n   * whether captcha has retry functionality\n   */\n  retry: PropTypes.bool,\n  /**\n   * the icon of retry button\n   */\n  retryIcon: PropTypes.string,\n  /**\n   * size of retry button icon\n   */\n  retryIconSize: PropTypes.number,\n  /**\n   * className of retry button\n   */\n  retryButtonClassName: PropTypes.string,\n  /**\n   * className of retry img\n   */\n  retryImgClassName: PropTypes.string,\n  /**\n   * className of captcha and retry button container div\n   */\n  containerClassName: PropTypes.string,\n  /**\n   * className of captcha image\n   */\n  captchaClassName: PropTypes.string\n};\n\nexport default ClientCaptcha;\n"],"names":["css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","ClientCaptcha","props","_this","chars","charsCount","captcha","i","index","Math","ceil","random","length","indexOf","push","join","e","preventDefault","generateCaptcha","width","height","fontSize","captchaCode","backgroundColor","fontFamily","fontColor","generateCode","ctx","canvasRef","current","getContext","fillStyle","fillRect","font","textAlign","textBaseline","fillText","split","React","createRef","Component","this","retryIcon","containerClassName","captchaClassName","retryButtonClassName","retryImgClassName","retry","retryIconSize","className","pointerEvents","onClick","resetCaptcha","id","src","alt","defaultProps","cssClasses","propTypes","PropTypes","number","isRequired","string","func","bool"],"mappings":"yvBAAA,SAAqBA,EAAKC,QACX,IAARA,IAAiBA,EAAM,IAC5B,IAAIC,EAAWD,EAAIC,SAEnB,GAAKF,GAA2B,oBAAbG,SAAnB,CAEA,IAAIC,EAAOD,SAASC,MAAQD,SAASE,qBAAqB,QAAQ,GAC9DC,EAAQH,SAASI,cAAc,SACnCD,EAAME,KAAO,WAEI,QAAbN,GACEE,EAAKK,WACPL,EAAKM,aAAaJ,EAAOF,EAAKK,YAKhCL,EAAKO,YAAYL,GAGfA,EAAMM,WACRN,EAAMM,WAAWC,QAAUb,EAE3BM,EAAMK,YAAYR,SAASW,eAAed,sdCnBxCe,yBACQC,iJACJA,+EASO,qBACiBC,EAAKD,MAA3BE,IAAAA,MAAOC,IAAAA,WACTC,EAAU,GACPC,EAAI,EAAGA,EAAIF,EAAYE,GAAK,EAAG,KAChCC,EAAQC,KAAKC,KAAKD,KAAKE,SAAWP,EAAMQ,QAC1CR,EAAMI,KAA6C,IAAnCF,EAAQO,QAAQT,EAAMI,IACxCF,EAAQQ,KAAKV,EAAMI,IAChBD,GAAK,SAELD,EAAQS,KAAK,4BAGP,SAAAC,GACbA,EAAEC,mBACGC,6CAGW,iBASZf,EAAKD,MAPPiB,IAAAA,MACAC,IAAAA,OACAC,IAAAA,SACAC,IAAAA,YACAC,IAAAA,gBACAC,IAAAA,WACAC,IAAAA,YAEGH,YAAcnB,EAAKuB,mBAClBC,EAAMxB,EAAKyB,UAAUC,QAAQC,WAAW,MAC9CH,EAAII,UAAYR,EAChBI,EAAIK,SAAS,EAAG,EAAGb,EAAOC,GAC1BO,EAAIM,eAAUZ,gBAAcG,GAC5BG,EAAIO,UAAY,SAChBP,EAAIQ,aAAe,SACnBR,EAAII,UAAYN,EAChBE,EAAIS,SAASjC,EAAKmB,YAAYe,MAAM,IAAItB,KAAK,KAAMI,EAAQ,EAAGC,EAAS,GACvEE,EAAYnB,EAAKmB,iBA5CZM,UAAYU,EAAMC,cAClBjB,YAAc,2PAJKkB,0DAQnBtB,yDAqDDuB,KAAKvC,MATPiB,IAAAA,MACAC,IAAAA,OACAsB,IAAAA,UACAC,IAAAA,mBACAC,IAAAA,iBACAC,IAAAA,qBACAC,IAAAA,kBACAC,IAAAA,MACAC,IAAAA,qBAGAV,uBAAKW,UAAWN,GACdL,0BACEnB,MAAOA,EACPC,OAAQA,EACRjC,IAAKsD,KAAKb,UACVpC,MAAO,CAAE0D,cAAe,QACxBD,UAAWL,IAEZG,GACCT,0BACEa,QAASV,KAAKW,aACdC,GAAG,cACHJ,UAAWJ,GAEXP,uBACEgB,IAAKZ,EACLa,IAAI,iBACJN,UAAWH,EACX3B,MAAO6B,EACP5B,OAAQ4B,2CAStB/C,EAAcuD,aAAe,CAC3BrC,MAAO,IACPC,OAAQ,GACRC,SAAU,GACVG,WAAY,gBACZC,UAAW,OACXrB,MAAO,iEACPC,WAAY,EACZkB,gBAAiB,UACjBwB,OAAO,EACPL,UAAW,mEACXM,cAAe,GACfH,qBAAsBY,EACtBX,kBAAmB,GACnBH,mBAAoBc,EACpBb,iBAAkB,IAGpB3C,EAAcyD,UAAY,CAIxBvC,MAAOwC,EAAUC,OAAOC,WAIxBzC,OAAQuC,EAAUC,OAAOC,WAIzBxC,SAAUsC,EAAUC,OAIpBpC,WAAYmC,EAAUG,OAItBrC,UAAWkC,EAAUG,OAIrB1D,MAAOuD,EAAUG,OAIjBzD,WAAYsD,EAAUC,OAItBtC,YAAaqC,EAAUI,KAAKF,WAI5BtC,gBAAiBoC,EAAUG,OAI3Bf,MAAOY,EAAUK,KAIjBtB,UAAWiB,EAAUG,OAIrBd,cAAeW,EAAUC,OAIzBf,qBAAsBc,EAAUG,OAIhChB,kBAAmBa,EAAUG,OAI7BnB,mBAAoBgB,EAAUG,OAI9BlB,iBAAkBe,EAAUG"}